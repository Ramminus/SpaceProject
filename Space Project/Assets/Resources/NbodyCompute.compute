// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct PlanetData
{
    double3 pos;
    double mass;
    double3 velocity;
    int index;
    bool destroyed;
};
struct OutData
{
    double3 pos;
    double3 vel;
    bool destroyed;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<PlanetData> dataBuffer;
RWStructuredBuffer<OutData> outBuffer;
RWStructuredBuffer<OutData> unaffectedBuffer;
StructuredBuffer<double> unaffectedMasses;
int number;
int loops = 30;
float timestep;

  //PEFRL Constants;



double3 CalculateForce(PlanetData p1, PlanetData p2)
{

    double GConstant = 6.674E-11;
    double3 direction = normalize(p2.pos - p1.pos);
    double r = distance(p2.pos, p1.pos);
    double m1 = p1.mass;
    double m2 = p2.mass;
    double force = (GConstant * m1 * m2 / pow(r, 2));
    return force * direction;
}
double3 CalculateForceUnaffected(OutData p1, double moonmMass, PlanetData p2)
{

    double GConstant = 6.674E-11;
    double3 direction = normalize(p2.pos - p1.pos);
    double r = distance(p2.pos, p1.pos);

    double m1 = moonmMass;

    double m2 = p2.mass;

    double force = (GConstant * m1 * m2 / pow(r, 2));

   
   



    return force * direction;


}
double3 calculateOverallForce(int i)
{
    double3 force;
    for (int x = 0; x < number; x++)
    {
        if (x != i)
        {
            if (!dataBuffer[x].destroyed)
            {
                force += CalculateForce(dataBuffer[i], dataBuffer[x]);
            }
			

        }
    }
    return force / dataBuffer[i].mass;
}
double3 calculateOverallForceUnaffected(int i)
{
    double3 force = 0;
    for (int x = 0; x < number; x++)
    {
        if (!dataBuffer[x].destroyed)
        {
            force += CalculateForceUnaffected(unaffectedBuffer[i], unaffectedMasses[i], dataBuffer[x]);
        }
            
        
            
			

        
    }
    return force / unaffectedMasses[i];
}
[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (dataBuffer[id.x].destroyed)
        return;
    double pefrlX = 0.1786178958448091;
    double pefrlY = -0.2123418310626054;
    double pefrlz = -0.6626458266981849E-1;
    loops = 10;
    float hStep = timestep / (float) loops;

    
       
       // dataBuffer[id.x].velocity = outBuffer[id.x].vel;
        //dataBuffer[id.x].pos = outBuffer[id.x].pos;
    float3 velocity = dataBuffer[id.x].velocity;
        //double3 pos = dataBuffer[id.x].pos;
    
    for (int i = 0; i < loops; i++)
    {
        dataBuffer[id.x].pos += pefrlX * hStep * velocity;
        velocity += (1 - 2 * pefrlY) * (hStep * 0.5) * calculateOverallForce(id.x);
        dataBuffer[id.x].pos += pefrlz * hStep * velocity;
        velocity += pefrlY * hStep * calculateOverallForce(id.x);
        dataBuffer[id.x].pos += (1 - 2 * (pefrlz + pefrlX)) * hStep * velocity;
        velocity += pefrlY * hStep * calculateOverallForce(id.x);
        dataBuffer[id.x].pos += pefrlz * hStep * velocity;
        velocity += (1 - 2 * pefrlY) * (0.5 * hStep) * calculateOverallForce(id.x);
        dataBuffer[id.x].pos += pefrlX * hStep * velocity;
    }
       // outBuffer[id.x].vel = velocity;
        //outBuffer[id.x].pos = dataBuffer[id.x].pos;
    dataBuffer[id.x].velocity = velocity;

}





